import { ICON_NAMES } from '~/consts/icon';

const ID = 'REGISTER_FORM';

export const IDS = {
  REGISTER_FORM_INPUT: `${ID}_INPUT`,
  REGISTER_FORM_UI: `${ID}_UI`,
  REGISTER_FORM_VALIDATION: `${ID}_VALIDATION`,
  REGISTER_FORM_SUBMIT: `${ID}_SUBMIT`,
  REGISTER_FORM_ERROR_HANDLING: `${ID}_ERROR_HANDLING`,
} as const;

export const REGISTER_FORM = {
  PATH: 'register-form',
  LABEL: '登録フォーム実装',
  ICON_NAME: ICON_NAMES.REACT,
  DESCRIPTION: 'UI + ロジック実装',
  DETAIL: {
    [IDS.REGISTER_FORM_INPUT]: {
      isPublic: true,
      path: 'input',
      cost: 8,
      title: '入力要素の実装',
      description: `
      UIパーツとしてポピュラーな入力要素の実装を行います。
    `,
      requirements: [
        'テキストが入力できること',
        'emailの形式のみ入力できること',
        'labelタグを用いていること',
        '入力された値はReactのstateとして管理されていること',
      ],
    },
    [IDS.REGISTER_FORM_UI]: {
      isPublic: true,
      path: 'ui',
      cost: 13,
      title: 'UI構築',
      description:
        '会員登録やお問い合わせなど、ユーザーの操作によってサービス運営者等に向けて自らの情報を送る為のフォームです。',
      requirements: [
        'デザイン通りに実装されていること（アニメーションを除く）',
        '分離可能なコンポーネントはAtomic Designに則って~/src/components配下に適切に分離されていること',
      ],
    },
    [IDS.REGISTER_FORM_VALIDATION]: {
      isPublic: true,
      path: 'validation',
      cost: 8,
      title: 'バリデーション処理',
      description: `登録ボタン押下時に各項目が期待値通りでない場合、赤字で期待値を満たしていないことをユーザーに伝える機能の実装です。\n
        HTMLInputElementには入力必須を指定するrequiredという属性を付与する方法もありますが、今回はそちらを使用せずに自身で実装したプログラムによって各項目が期待値を満たすかどうかをチェックする処理を実装していきましょう。
      `,
      requirements: [
        'すべてのバリデーション処理は「登録」ボタン押下時に実行されること',
        'お名前（姓）が未記入の場合、「名字を入力してください」と赤字で表示されること',
        'お名前（姓）が20文字以上の場合、「20文字以内で入力してください」と表示されること',
        'お名前（名）が未記入の場合、「名前を入力してください」と赤字で表示されること',
        'お名前（名）が20文字以上の場合、「20文字以内で入力してください」と表示されること',
        'メールアドレスが未記入の場合、「メールアドレスを入力してください」と赤字で表示されること',
        'メールアドレスが正しい形式（XXX@XXX.XXX）になっていない場合、「メールアドレスは `@` と `ドメイン名` を含んだ値を入力してください」と赤字で表示されること',
        '性別が未記入の場合、「性別」を入力してくださいと表示されること',
        '生年月日が未記入の場合、「生年月日を入力してください」と表示されること',
      ],
    },
    [IDS.REGISTER_FORM_SUBMIT]: {
      isPublic: true,
      path: 'submit',
      cost: 21,
      title: '送信処理',
      description: `バリデーションを終えてアプリケーションが期待する値が送れる準備が整った為、いよいよフォーム機能の山場であるAPIに対してリクエストを送信する処理の実装です。\n
        リクエスト周りは色々様々な箇所に気を配る必要があります。前回のLessonでも実装したようなバリデーション機能であったり、他にも二重送信を防ぐ為に通信中はボタンを非活性にしたり、入力したデータを変更できないようにしたりと、ユーザーの誤操作を防いだり現在のステータスを逐一分かりやすく表現することでユーザーに待機を促したりする効果があります。\n
        少々機能としては多めになりますが、自分がエンドユーザーとして利用する側になった時のことをイメージして、より使いやすいUIになるように意識してみましょう。\n
        ※ APIは当アプリケーション内で立てられたサーバーに対してリクエストする為、実際にどこかに入力情報を流すわけではないのでそこはご安心ください
      `,
      requirements: [
        '「登録」ボタン押下時に `/api/curriculums/users/register` に対してPOSTリクエストが実行されること（リクエスト処理はutil関数として新規作成してください）',
        'リクエスト中は各種inputの入力や、「登録」ボタンの押下ができないこと',
        'リクエスト中は「登録」ボタンの文言が「登録中...」となり、背景色が灰色になること',
        'リクエストが完了したら成功したことを伝えるモーダルが表示されること',
        'モーダルの見出しは「アカウント登録を受け付けました！」であること',
        'モーダルの本文は「ご入力頂いたメールアドレスに本登録用のURLが記載されたメールを送信しましたのでご確認ください。」であること',
        'モーダルが開いた場合、「閉じる」ボタンが設置されていること',
        'モーダルが開いた場合、右上に「X」ボタンが設置されていること',
        'モーダルが開いた場合、オーバーレイが表示されていること',
        '「閉じる」ボタンを押下した場合、モーダルが閉じること',
        '「X」ボタンを押下した場合、モーダルが閉じること',
        'オーバーレイを押下した場合、モーダルが閉じること',
        'モーダルが表示されている場合、スクロールができないこと',
      ],
    },
    [IDS.REGISTER_FORM_ERROR_HANDLING]: {
      isPublic: true,
      path: 'error-handling',
      cost: 8,
      title: 'エラーハンドリング',
      description: `
        APIは必ずしも期待値通りの結果を返すわけではありません。\n
        バリデーションをした上でも入力した値がサーバーサイドの期待値と異なっていたり、インターネットの接続状況が良くなくリクエストがサーバーまで届いていなかったりと、様々な要因でエラーが発生します。\n
        状況にもよりますがユーザーに対してリクエストが正しく行われなかったことをなるべく具体的かつ端的に伝えて、次のアクションを促すようにしましょう。
      `,
      requirements: [
        'APIからエラーが渡ってきた場合、エラーメッセージをToastで表示すること（react-hot-toastというライブラリをインストールしてください）',
        'Toastを表示しようとする場合、画面右下で表示されていること',
        'Toastが表示された場合、「X」ボタンが表示されていること',
        'Toastが表示された場合、5秒経過後に自動で閉じること',
        '「X」ボタンを押下した場合、Toastが閉じること',
        'リクエストして2秒経過してもAPIからレスポンスが返らない場合、「タイムアウトになりました。通信状態を確認して再度お試しください。」と表示されること',
      ],
    },
  },
};
